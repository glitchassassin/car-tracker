name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]
  push:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Run type checking
        run: npm run typecheck

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: build/
          retention-days: 1

  deploy-pr:
    name: Deploy PR Environment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    environment: pr-${{ github.event.number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Update wrangler config for PR
        run: |
          # Read the current wrangler.jsonc and add PR environment
          node -e "
          const fs = require('fs');
          const config = JSON.parse(fs.readFileSync('wrangler.jsonc', 'utf8').replace(/\/\*[\s\S]*?\*\//g, '').replace(/\/\/.*$/gm, ''));
          
          // Add PR environment to the env section
          if (!config.env) config.env = {};
          config.env['pr-${{ github.event.number }}'] = {
            name: 'car-tracker-pr-${{ github.event.number }}',
            vars: {
              VALUE_FROM_CLOUDFLARE: 'Hello from Cloudflare (PR #${{ github.event.number }})',
              ENVIRONMENT: 'pr-${{ github.event.number }}',
              PR_NUMBER: '${{ github.event.number }}'
            }
          };
          
          // Write back the updated config with pretty formatting
          fs.writeFileSync('wrangler.jsonc', JSON.stringify(config, null, '\t'));
          "

      - name: Build application
        run: npm run build

      - name: Deploy to PR Environment
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env pr-${{ github.event.number }}

      - name: Create deployment summary
        run: |
          echo "## 🚀 PR Environment Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Deployment URL** | [${{ steps.deploy.outputs.deployment-url }}](${{ steps.deploy.outputs.deployment-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Environment** | \`pr-${{ github.event.number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 **PR Number** | #${{ github.event.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 **Worker Name** | \`car-tracker-pr-${{ github.event.number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> This environment will be automatically cleaned up when the PR is closed." >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **PR Environment Deployed!**
              
              Your changes have been deployed to: ${deploymentUrl}
              
              Environment: \`pr-${{ github.event.number }}\`
              Commit: \`${{ github.sha }}\`
              
              This environment will be automatically cleaned up when the PR is closed.`
            });

  cleanup-pr:
    name: Cleanup PR Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Update wrangler config for PR cleanup
        run: |
          # Read the current wrangler.jsonc and add PR environment for cleanup
          node -e "
          const fs = require('fs');
          const config = JSON.parse(fs.readFileSync('wrangler.jsonc', 'utf8').replace(/\/\*[\s\S]*?\*\//g, '').replace(/\/\/.*$/gm, ''));
          
          // Add PR environment to the env section for cleanup
          if (!config.env) config.env = {};
          config.env['pr-${{ github.event.number }}'] = {
            name: 'car-tracker-pr-${{ github.event.number }}',
            vars: {
              ENVIRONMENT: 'pr-${{ github.event.number }}',
              PR_NUMBER: '${{ github.event.number }}'
            }
          };
          
          // Write back the updated config
          fs.writeFileSync('wrangler.jsonc', JSON.stringify(config, null, '\t'));
          "

      - name: Delete PR Environment
        id: cleanup
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: delete --env pr-${{ github.event.number }} --force
        continue-on-error: true

      - name: Create cleanup summary
        run: |
          CLEANUP_SUCCESS=${{ steps.cleanup.outcome == 'success' }}
          if [ "$CLEANUP_SUCCESS" = "true" ]; then
            echo "## 🧹 PR Environment Cleaned Up" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Successfully deleted preview environment!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ PR Environment Cleanup Attempted" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Cleanup completed with warnings**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 **PR Number** | #${{ github.event.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 **Worker Name** | \`car-tracker-pr-${{ github.event.number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **PR Link** | [View PR](${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 **Triggered by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$CLEANUP_SUCCESS" = "true" ]; then
            echo "🎉 Thanks for your contribution! The preview environment has been cleaned up." >> $GITHUB_STEP_SUMMARY
          else
            echo "💡 The environment may have already been deleted or there was a minor issue. No action needed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with cleanup confirmation
        uses: actions/github-script@v7
        with:
          script: |
            // Check if cleanup was successful by looking at the step outcome
            const cleanupSuccess = '${{ steps.cleanup.outcome }}' === 'success';
            const emoji = cleanupSuccess ? '🧹' : '⚠️';
            const status = cleanupSuccess ? 'Cleaned Up' : 'Cleanup Attempted';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **PR Environment ${status}**
              
              The preview environment \`pr-${{ github.event.number }}\` has been ${cleanupSuccess ? 'successfully deleted' : 'processed for cleanup'}.
              
              Thanks for your contribution! 🎉`
            });

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Build application
        run: npm run build

      - name: Deploy to Production
        id: production-deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: Create production deployment summary
        run: |
          echo "## 🌟 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Successfully deployed to production!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Production URL** | [${{ steps.production-deploy.outputs.deployment-url }}](${{ steps.production-deploy.outputs.deployment-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Environment** | \`production\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 **Worker Name** | \`car-tracker\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌿 **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 **Deployed by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Your application is now live and available to users!" >> $GITHUB_STEP_SUMMARY

      - name: Output Production URL
        run: |
          echo "🚀 Production deployed to: ${{ steps.production-deploy.outputs.deployment-url }}" 