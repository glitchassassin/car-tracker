name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]
  push:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Run type checking
        run: npm run typecheck

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: build/
          retention-days: 1

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 30

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: test-results/
          retention-days: 30

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Build application
        run: npm run build

      - name: Upload version to Cloudflare
        id: upload
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: versions upload --tag pr-${{ github.event.number }}

      - name: Extract preview URL
        id: extract-url
        env:
          CMD_OUTPUT: ${{ steps.upload.outputs.command-output }}
        run: |
          # Extract the preview URL from the output
          PREVIEW_URL=$(echo "$CMD_OUTPUT" | grep -o "Version Preview URL: https://[^ ]*" | cut -d' ' -f4)
          echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## 🚀 Preview Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Preview version uploaded successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Preview URL** | [${{ steps.extract-url.outputs.preview-url }}](${{ steps.extract-url.outputs.preview-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Tag** | \`pr-${{ github.event.number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 🌐 This preview will be available until a new version is deployed." >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.extract-url.outputs.preview-url }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview Deployed!**
              
              Your changes are now live at: **${previewUrl}**
              
              | Property | Value |
              |----------|-------|
              | 🌐 Preview URL | [${previewUrl}](${previewUrl}) |
              | 🏷️ Version Tag | \`pr-${{ github.event.number }}\` |
              | 🔗 Commit | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |
              
              This preview will be available until a new version is deployed.`
            });

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Build application
        run: npm run build

      - name: Apply database migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply car-tracker-db --remote

      - name: Deploy to Production
        id: production-deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production

      - name: Create production deployment summary
        run: |
          echo "## 🌟 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Successfully deployed to production!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Production URL** | [${{ steps.production-deploy.outputs.deployment-url }}](${{ steps.production-deploy.outputs.deployment-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Environment** | \`production\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 **Worker Name** | \`car-tracker\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌿 **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 **Deployed by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Your application is now live and available to users!" >> $GITHUB_STEP_SUMMARY

      - name: Output Production URL
        run: |
          echo "🚀 Production deployed to: ${{ steps.production-deploy.outputs.deployment-url }}" 